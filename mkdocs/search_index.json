{
    "docs": [
        {
            "location": "/", 
            "text": "Package MESH\n\n\nM\nultilayer \nE\nlectromagnetic \nS\nolver for \nH\neat transfer.\n\n\nA program for computing electromagnetic far-field and near-field heat transfer for periodic, layered\nstructures, developed by \nKaifeng Chen\n (\n) of the\n\nFan group\n in the Stanford Electrical Engineering Department.\n\n\nThe program is built upon C++ and wrapped with Lua (\n= 5.2), with OpenMP and MPI support. It is enabled with heat flux calculation in both far and near field, along with implementations about structure visualization through \nPOVRay\n. The source code can be downloaded at \nGithub\n This document will cover the basic ideas behind MESH, complete descriptions of the Lua API and C++ API, and a few concrete examples created either to illustrate the simple usage or to reproduce some of results from existing literatures. The documents are organized as follows:\n\n\nOverview\n\n\n\n\nEquations \n Features\n: detailed equations computed and features offered by the package.\n\n\nInstallation\n: the installation steps on different platforms and clusters.\n\n\n\n\nLua API\n\n\n\n\nBase Class\n: the base class the code is built upon.\n\n\nSimulationPlanar\n: the inherited class computing planar geometries\n\n\nSimulationGrating\n: the inherited class computing 1D grating geometries.\n\n\nSimulationPattern\n: the inherited class computing 2D pattern geometries.\n\n\n\n\nC++ API\n\n\n\n\nC++ classes and functions\n: the C++ interface for all the functions.\n\n\n\n\nExamples\n\n\n\n\nTutorial Example\n: a simple tutorial setting up the inputs and running the input script.\n\n\nSingle Plane Far-field\n: example about thermal radiation to the far field.\n\n\nTwo Planes Near-field\n: example about near-field heat transfer between two planes.\n\n\nAnisotropic Material Near-field\n: example about simulations involving anisotropic material.\n\n\nIterate Over Gaps Near-field\n: example about iterating over different gaps for near-field heat transfer between two plates.\n\n\nTwo Gratings Near-field\n: example the calculation between two grating structures in the near-field regime.\n\n\nTwo Rectangle Patterns Near-field\n: example about the near-field heat transfer between two rectangle patterned structures\n\n\nMixed Patterns Near-field\n: example about the near-field heat transfer between two structures with different kinds of patterns (rectangle and circle).\n\n\nMPI Example\n: example about how to use Lua wrapped MPI interface for fast parallelization on distributed clusters.\n\n\n\n\nOther information\n\n\n\n\nDeveloper\n: information for developers on how to contribute to MESH\n\n\nAbout\n: Information about the author, license, copyrights and contact addresses.", 
            "title": "Home"
        }, 
        {
            "location": "/#package-mesh", 
            "text": "M ultilayer  E lectromagnetic  S olver for  H eat transfer.  A program for computing electromagnetic far-field and near-field heat transfer for periodic, layered\nstructures, developed by  Kaifeng Chen  ( ) of the Fan group  in the Stanford Electrical Engineering Department.  The program is built upon C++ and wrapped with Lua ( = 5.2), with OpenMP and MPI support. It is enabled with heat flux calculation in both far and near field, along with implementations about structure visualization through  POVRay . The source code can be downloaded at  Github  This document will cover the basic ideas behind MESH, complete descriptions of the Lua API and C++ API, and a few concrete examples created either to illustrate the simple usage or to reproduce some of results from existing literatures. The documents are organized as follows:", 
            "title": "Package MESH"
        }, 
        {
            "location": "/#overview", 
            "text": "Equations   Features : detailed equations computed and features offered by the package.  Installation : the installation steps on different platforms and clusters.", 
            "title": "Overview"
        }, 
        {
            "location": "/#lua-api", 
            "text": "Base Class : the base class the code is built upon.  SimulationPlanar : the inherited class computing planar geometries  SimulationGrating : the inherited class computing 1D grating geometries.  SimulationPattern : the inherited class computing 2D pattern geometries.", 
            "title": "Lua API"
        }, 
        {
            "location": "/#c-api", 
            "text": "C++ classes and functions : the C++ interface for all the functions.", 
            "title": "C++ API"
        }, 
        {
            "location": "/#examples", 
            "text": "Tutorial Example : a simple tutorial setting up the inputs and running the input script.  Single Plane Far-field : example about thermal radiation to the far field.  Two Planes Near-field : example about near-field heat transfer between two planes.  Anisotropic Material Near-field : example about simulations involving anisotropic material.  Iterate Over Gaps Near-field : example about iterating over different gaps for near-field heat transfer between two plates.  Two Gratings Near-field : example the calculation between two grating structures in the near-field regime.  Two Rectangle Patterns Near-field : example about the near-field heat transfer between two rectangle patterned structures  Mixed Patterns Near-field : example about the near-field heat transfer between two structures with different kinds of patterns (rectangle and circle).  MPI Example : example about how to use Lua wrapped MPI interface for fast parallelization on distributed clusters.", 
            "title": "Examples"
        }, 
        {
            "location": "/#other-information", 
            "text": "Developer : information for developers on how to contribute to MESH  About : Information about the author, license, copyrights and contact addresses.", 
            "title": "Other information"
        }, 
        {
            "location": "/features/", 
            "text": "Physical Quantities Computed By MESH\n\n\nBy classifying the geometries into three different categories: planar geometry where the basic components are plates, grating geometry which contains at least one layer has a grating along \nx\n direction, and patterns where at least one layer has either rectangle or circular patterns. The details about these three types are discussed below.\n\n\nHeat transfer in planar geometries\n\n\nIn general, the total heat transfer between bodies with temperatures \nT_1\n and \nT_2\n is written as\n\n\n\n\nP=\\int d\\omega [\\Theta(T_1, \\omega)-\\Theta(T_2,\\omega)]\\Phi(\\omega)\n\n\n\n\nwhere the quantity \n\\Phi(\\omega)\n characterize the strength of heat transfer between the two bodies involved. For planar geometries (implemented as \nSimulationPlanar\n object),  the quantity \n\\Phi(\\omega)\n computed by integrating the \nk_x\n and \nk_y\n vector over the whole \nk\n space, i.e.\n\n\n\n\n\\Phi(\\omega)=\\int_{-\\infty}^{\\infty}dk_x\\int_{-\\infty}^{\\infty}dk_y \\Phi(k_x,k_y, \\omega)\n\n\n\n\nAnd in the case of an isotropic material in \nx\n and \ny\n direction, the above integral can be reduced to\n\n\n\n\n\\Phi(\\omega)=\\int_{0}^{\\infty}dk_{\\parallel} \\Phi(k_{\\parallel}, \\omega)\n\n\n\n\nMESH directly provides function to either compute \n\\Phi(\\omega, k_x, k_y)\n, \n\\Phi(\\omega, k_{\\parallel})\n and \n\\Phi(\\omega)\n directly.\n\n\nHeat transfer in grating geometries\n\n\nIn the case of a grating geometry (implemented as \nSimulationGrating\n object), the heat transfer rate is written as\n\n\n\n\n\\Phi(\\omega)=\\int_{-G/2}^{G/2}dk_x\\int_{-\\infty}^{\\infty}dk_y \\Phi(k_x,k_y, \\omega)\n\n\n\n\nHere again, MESH gives access to a few things\n\n\n\n\nsettings of the integral: for isotropic geometries \n\\int_{-G/2}^{G/2}\n and  \n\\int_{-\\infty}^{\\infty}\n can be reduced to twice of the integral over the positive axis.\n\n\ndirectly computation of \n\\Phi(k_x,k_y, \\omega)\n and \n\\Phi(\\omega)\n, and allows to print out \n\\Phi(k_x,k_y, \\omega)\n in the process of obtaining \n\\Phi(\\omega)\n.\n\n\n\n\nHeat transfer in pattern geometries\n\n\nIn the case of a pattern geometry (implemented as \nSimulationPattern\n object), the heat transfer rate is written as\n\n\n\n\n\\Phi(\\omega)=\\int_{-G_x/2}^{G_x/2}dk_x\\int_{-G_y/2}^{-G_y/2}dk_y \\Phi(k_x,k_y, \\omega)\n\n\n\n\nAgain similar to the grating geometries, integral settings and printing of intermediate \n\\Phi(k_x,k_y, \\omega)\n are supported. In addition, multiple different kinds of patterns can exist in one layer. However, the code now only supports a rectangle lattice and non-interleaving patterns. In MESH, the only two patterns supported are rectangle and circle. However, extending the code to non-trivial lattice and adding supports to more patterns are in principle doable.\n\n\nSupports over both scalar dielectric and tensor dielectric\n\n\nMESH also supports material whose dielectric can be scalar, diagonal, or a tensor. These three different types are encapsulated into a Union type in MESH. Currently for tensor types, MESH can only deal with the case when epsilon in the \nz\n direction can be decomposed from \nx\n and \ny\n directions, i.e.\n\n\n\n\n \\overleftrightarrow{\\epsilon}=\\begin{pmatrix}\n\\epsilon_{xx} & \\epsilon_{xy} & 0\\\\\n\\epsilon_{yx} & \\epsilon_{yy} & 0\\\\\n0 & 0 & \\epsilon_{zz}\n\\end{pmatrix}\n\n\n\n\nA Comprehensive Lua Wrapper for Users\n\n\nLua wrapper for C code is widely used because of easily implementation and high readability. For example, \nS4\n which is also an implementation of RCWA for periodic geometries, also utilized Lua as its front. Here MESH only gives the user basic functionalities of computing physical quantities related to heat transfer, but also allows users to directly use MPI in a lua script, so that users have better control over the simulation at run time. To show the advantages of directly revealing MPI interface to the users, a concrete example of lua MPI interface in shown in the \nexample section\n. MESH also provides a vanilla version that can be built without MPI. In that case, OpenMP is used if the system has OpenMP libraries built in.", 
            "title": "Equations & Features"
        }, 
        {
            "location": "/features/#physical-quantities-computed-by-mesh", 
            "text": "By classifying the geometries into three different categories: planar geometry where the basic components are plates, grating geometry which contains at least one layer has a grating along  x  direction, and patterns where at least one layer has either rectangle or circular patterns. The details about these three types are discussed below.", 
            "title": "Physical Quantities Computed By MESH"
        }, 
        {
            "location": "/features/#heat-transfer-in-planar-geometries", 
            "text": "In general, the total heat transfer between bodies with temperatures  T_1  and  T_2  is written as   P=\\int d\\omega [\\Theta(T_1, \\omega)-\\Theta(T_2,\\omega)]\\Phi(\\omega)   where the quantity  \\Phi(\\omega)  characterize the strength of heat transfer between the two bodies involved. For planar geometries (implemented as  SimulationPlanar  object),  the quantity  \\Phi(\\omega)  computed by integrating the  k_x  and  k_y  vector over the whole  k  space, i.e.   \\Phi(\\omega)=\\int_{-\\infty}^{\\infty}dk_x\\int_{-\\infty}^{\\infty}dk_y \\Phi(k_x,k_y, \\omega)   And in the case of an isotropic material in  x  and  y  direction, the above integral can be reduced to   \\Phi(\\omega)=\\int_{0}^{\\infty}dk_{\\parallel} \\Phi(k_{\\parallel}, \\omega)   MESH directly provides function to either compute  \\Phi(\\omega, k_x, k_y) ,  \\Phi(\\omega, k_{\\parallel})  and  \\Phi(\\omega)  directly.", 
            "title": "Heat transfer in planar geometries"
        }, 
        {
            "location": "/features/#heat-transfer-in-grating-geometries", 
            "text": "In the case of a grating geometry (implemented as  SimulationGrating  object), the heat transfer rate is written as   \\Phi(\\omega)=\\int_{-G/2}^{G/2}dk_x\\int_{-\\infty}^{\\infty}dk_y \\Phi(k_x,k_y, \\omega)   Here again, MESH gives access to a few things   settings of the integral: for isotropic geometries  \\int_{-G/2}^{G/2}  and   \\int_{-\\infty}^{\\infty}  can be reduced to twice of the integral over the positive axis.  directly computation of  \\Phi(k_x,k_y, \\omega)  and  \\Phi(\\omega) , and allows to print out  \\Phi(k_x,k_y, \\omega)  in the process of obtaining  \\Phi(\\omega) .", 
            "title": "Heat transfer in grating geometries"
        }, 
        {
            "location": "/features/#heat-transfer-in-pattern-geometries", 
            "text": "In the case of a pattern geometry (implemented as  SimulationPattern  object), the heat transfer rate is written as   \\Phi(\\omega)=\\int_{-G_x/2}^{G_x/2}dk_x\\int_{-G_y/2}^{-G_y/2}dk_y \\Phi(k_x,k_y, \\omega)   Again similar to the grating geometries, integral settings and printing of intermediate  \\Phi(k_x,k_y, \\omega)  are supported. In addition, multiple different kinds of patterns can exist in one layer. However, the code now only supports a rectangle lattice and non-interleaving patterns. In MESH, the only two patterns supported are rectangle and circle. However, extending the code to non-trivial lattice and adding supports to more patterns are in principle doable.", 
            "title": "Heat transfer in pattern geometries"
        }, 
        {
            "location": "/features/#supports-over-both-scalar-dielectric-and-tensor-dielectric", 
            "text": "MESH also supports material whose dielectric can be scalar, diagonal, or a tensor. These three different types are encapsulated into a Union type in MESH. Currently for tensor types, MESH can only deal with the case when epsilon in the  z  direction can be decomposed from  x  and  y  directions, i.e.    \\overleftrightarrow{\\epsilon}=\\begin{pmatrix}\n\\epsilon_{xx} & \\epsilon_{xy} & 0\\\\\n\\epsilon_{yx} & \\epsilon_{yy} & 0\\\\\n0 & 0 & \\epsilon_{zz}\n\\end{pmatrix}", 
            "title": "Supports over both scalar dielectric and tensor dielectric"
        }, 
        {
            "location": "/features/#a-comprehensive-lua-wrapper-for-users", 
            "text": "Lua wrapper for C code is widely used because of easily implementation and high readability. For example,  S4  which is also an implementation of RCWA for periodic geometries, also utilized Lua as its front. Here MESH only gives the user basic functionalities of computing physical quantities related to heat transfer, but also allows users to directly use MPI in a lua script, so that users have better control over the simulation at run time. To show the advantages of directly revealing MPI interface to the users, a concrete example of lua MPI interface in shown in the  example section . MESH also provides a vanilla version that can be built without MPI. In that case, OpenMP is used if the system has OpenMP libraries built in.", 
            "title": "A Comprehensive Lua Wrapper for Users"
        }, 
        {
            "location": "/installation/", 
            "text": "Prerequisites\n\n\nMESH comes with two versions: one has OpenMP support if the system has OpenMP libraries; one has MPI support. Both of them requires the following Prerequisites:\n\n\n\n\nLapack and blas (or blas mutants, such as openblas, atlas, or mkl).\n\n\nLua version \n= 5.2 (version 5.3.x is preferred).\n\n\n\n\nIn order to have the MPI version of MESH installed, one needs to install MPI besides the above two libraries.\n\n\nMESH can be downloaded by\n\n\ngit clone git@github.com:kfrancischen/MESH.git\nunzip MESH_master.zip\ncd MESH_master\n\n\n\nInstallation on Linux\n\n\nIf the above libraries are installed on the system default directory, The vanilla version of MESH can be simply installed by\n\n\nmake\n\n\n\nand the MPI version can be installed by\n\n\nmake meshMPI\n\n\n\nExecutables can be found in directory \nbuild/\n. The executables are called \nmesh\n and \nmeshMPI\n.\n\n\nFor a customized installation, please change the paths for compilers in \nMakefile.Linux\n.\n\n\nInstallation on MacOS\n\n\nDefault clang compiler does not support OpenMP. One can either follow the same steps exactly the same as the installation on Linux machines (then no OpenMP is not supported), or installing gcc with OpenMP first by\n\n\nbrew install gcc --without-multilib\n\n\n\nand then change the compiles from cc and c++ to corresponding gnu compilers.\n\n\nInstallation on Windows\n\n\n//TODO, haven't tried yet\n\n\nLocation on Clusters\n\n\nThe mesh has been built on \nhera\n, \ncomet\n and \nstampede\n. The executables are in the directory\n\n\n/home/kfchen/MESH/build/\n\n\n\nOne can add this to one's own path by adding\n\n\nexport PATH=\"$PATH:/home/kfchen/MESH/build/\"\n\n\nin \n.bashrc\n.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#prerequisites", 
            "text": "MESH comes with two versions: one has OpenMP support if the system has OpenMP libraries; one has MPI support. Both of them requires the following Prerequisites:   Lapack and blas (or blas mutants, such as openblas, atlas, or mkl).  Lua version  = 5.2 (version 5.3.x is preferred).   In order to have the MPI version of MESH installed, one needs to install MPI besides the above two libraries.  MESH can be downloaded by \ngit clone git@github.com:kfrancischen/MESH.git\nunzip MESH_master.zip\ncd MESH_master", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/installation/#installation-on-linux", 
            "text": "If the above libraries are installed on the system default directory, The vanilla version of MESH can be simply installed by \nmake  and the MPI version can be installed by \nmake meshMPI  Executables can be found in directory  build/ . The executables are called  mesh  and  meshMPI .  For a customized installation, please change the paths for compilers in  Makefile.Linux .", 
            "title": "Installation on Linux"
        }, 
        {
            "location": "/installation/#installation-on-macos", 
            "text": "Default clang compiler does not support OpenMP. One can either follow the same steps exactly the same as the installation on Linux machines (then no OpenMP is not supported), or installing gcc with OpenMP first by \nbrew install gcc --without-multilib  and then change the compiles from cc and c++ to corresponding gnu compilers.", 
            "title": "Installation on MacOS"
        }, 
        {
            "location": "/installation/#installation-on-windows", 
            "text": "//TODO, haven't tried yet", 
            "title": "Installation on Windows"
        }, 
        {
            "location": "/installation/#location-on-clusters", 
            "text": "The mesh has been built on  hera ,  comet  and  stampede . The executables are in the directory \n/home/kfchen/MESH/build/  One can add this to one's own path by adding \nexport PATH=\"$PATH:/home/kfchen/MESH/build/\" \nin  .bashrc .", 
            "title": "Location on Clusters"
        }, 
        {
            "location": "/LuaAPI/baseClass/", 
            "text": "", 
            "title": "Base Class"
        }, 
        {
            "location": "/LuaAPI/planar/", 
            "text": "", 
            "title": "SimulationPlanar"
        }, 
        {
            "location": "/LuaAPI/grating/", 
            "text": "", 
            "title": "SimulationGrating"
        }, 
        {
            "location": "/LuaAPI/pattern/", 
            "text": "", 
            "title": "SimulationPattern"
        }, 
        {
            "location": "/C++API/classAndFunction/", 
            "text": "", 
            "title": "Classes and Functions"
        }, 
        {
            "location": "/Examples/tutorial/", 
            "text": "", 
            "title": "Tutorial Example"
        }, 
        {
            "location": "/Examples/planeFarField/", 
            "text": "", 
            "title": "Single Plane Far-field"
        }, 
        {
            "location": "/Examples/planeNearField/", 
            "text": "", 
            "title": "Two Planes Near-field"
        }, 
        {
            "location": "/Examples/anisotropic/", 
            "text": "", 
            "title": "Anisotropic Material Near-field"
        }, 
        {
            "location": "/Examples/iterate/", 
            "text": "", 
            "title": "Iterate Over Gaps Near-field"
        }, 
        {
            "location": "/Examples/gratingNearField/", 
            "text": "", 
            "title": "Two Gratings Near-field"
        }, 
        {
            "location": "/Examples/rectangleNearField/", 
            "text": "", 
            "title": "Two Rectangle Patterns Near-field"
        }, 
        {
            "location": "/Examples/mixedNearField/", 
            "text": "", 
            "title": "Mixed Patterns Near-field"
        }, 
        {
            "location": "/Examples/MPI/", 
            "text": "", 
            "title": "MPI Example"
        }, 
        {
            "location": "/develop/", 
            "text": "", 
            "title": "Developer"
        }, 
        {
            "location": "/about/", 
            "text": "MESH is copyright (c) 2016-2018, Stanford University.\n\n\nMESH is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\n\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\n\nYou should have received a copy of the GNU General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. You can also find it on the GNU web site:\n\n\nhttp://www.gnu.org/copyleft/gpl.html\n\n\nThe author would like to acknowledge the following packages:\n\n\n\n\n\n\narmadillo: \nC++ linear algebra library\n\n\n\n\n\n\nluawrapper: \nThe lua wrapper for C++ classes\n\n\n\n\n\n\nlua-mpi: \nThe lua wrapper for MPI\n\n\n\n\n\n\nAlso, the author would like to thank Dr. Bo Zhao, Yu Guo and alumni Victor Liu for useful discussions, and Siddharth Buddhiraju for testing installation and some cases.", 
            "title": "About"
        }
    ]
}