{
    "docs": [
        {
            "location": "/", 
            "text": "Package MESH\n\n\nM\nultilayer \nE\nlectromagnetic \nS\nolver for \nH\neat transfer.\n\n\nA program for computing electromagnetic far-field and near-field heat transfer for periodic, layered\nstructures, developed by \nKaifeng Chen\n (\n) of the\n\nFan group\n in the Stanford Electrical Engineering Department.\n\n\nThe program is built upon C++ and wrapped with Lua (\n= 5.2), with OpenMP and MPI support. It is enabled with heat flux calculation in both far and near field, along with implementations about structure visualization through \nPOVRay\n. The source code can be downloaded at \nGithub\n. This document will cover the basic ideas behind MESH, complete descriptions of the Lua API and C++ API, and a few concrete examples created either to illustrate the simple usage or to reproduce some of results from existing literatures. The documents are organized as follows:\n\n\nOverview\n\n\n\n\nEquations \n Features\n: detailed equations computed and features offered by the package.\n\n\nInstallation\n: the installation steps on different platforms and clusters.\n\n\n\n\nLua API\n\n\n\n\nBase Class\n: the base class the code is built upon.\n\n\nSimulationPlanar\n: the inherited class for planar geometries.\n\n\nSimulationGrating\n: the inherited class for 1D grating geometries.\n\n\nSimulationPattern\n: the inherited class for 2D pattern geometries.\n\n\n\n\nC++ API\n\n\n\n\nC++ classes and functions\n: the C++ interface for all the functions.\n\n\n\n\nExamples\n\n\n\n\nTutorial Example\n: a simple tutorial about setting up the inputs and running the input script.\n\n\nSingle Plane Far-field\n: example about thermal radiation to the far field.\n\n\nTwo Planes Near-field\n: example about near-field heat transfer between two planes.\n\n\nAnisotropic Material Near-field\n: example about simulations involving anisotropic material.\n\n\nIterate Over Gaps Near-field\n: example about iterating over different gaps for near-field heat transfer between two plates.\n\n\nTwo Gratings Near-field\n: example the calculation between two grating structures in the near-field regime.\n\n\nTwo Rectangle Patterns Near-field\n: example about the near-field heat transfer between two rectangle patterned structures\n\n\nMixed Patterns Near-field\n: example about the near-field heat transfer between two structures with different kinds of patterns (rectangle and circle).\n\n\nMPI Example\n: example about how to use Lua wrapped MPI interface for fast parallelization on distributed clusters.\n\n\n\n\nOther information\n\n\n\n\nDeveloper\n: information for developers on how to contribute to MESH\n\n\nAbout\n: information about the author, license, copyrights and contact addresses.", 
            "title": "Home"
        }, 
        {
            "location": "/#package-mesh", 
            "text": "M ultilayer  E lectromagnetic  S olver for  H eat transfer.  A program for computing electromagnetic far-field and near-field heat transfer for periodic, layered\nstructures, developed by  Kaifeng Chen  ( ) of the Fan group  in the Stanford Electrical Engineering Department.  The program is built upon C++ and wrapped with Lua ( = 5.2), with OpenMP and MPI support. It is enabled with heat flux calculation in both far and near field, along with implementations about structure visualization through  POVRay . The source code can be downloaded at  Github . This document will cover the basic ideas behind MESH, complete descriptions of the Lua API and C++ API, and a few concrete examples created either to illustrate the simple usage or to reproduce some of results from existing literatures. The documents are organized as follows:", 
            "title": "Package MESH"
        }, 
        {
            "location": "/#overview", 
            "text": "Equations   Features : detailed equations computed and features offered by the package.  Installation : the installation steps on different platforms and clusters.", 
            "title": "Overview"
        }, 
        {
            "location": "/#lua-api", 
            "text": "Base Class : the base class the code is built upon.  SimulationPlanar : the inherited class for planar geometries.  SimulationGrating : the inherited class for 1D grating geometries.  SimulationPattern : the inherited class for 2D pattern geometries.", 
            "title": "Lua API"
        }, 
        {
            "location": "/#c-api", 
            "text": "C++ classes and functions : the C++ interface for all the functions.", 
            "title": "C++ API"
        }, 
        {
            "location": "/#examples", 
            "text": "Tutorial Example : a simple tutorial about setting up the inputs and running the input script.  Single Plane Far-field : example about thermal radiation to the far field.  Two Planes Near-field : example about near-field heat transfer between two planes.  Anisotropic Material Near-field : example about simulations involving anisotropic material.  Iterate Over Gaps Near-field : example about iterating over different gaps for near-field heat transfer between two plates.  Two Gratings Near-field : example the calculation between two grating structures in the near-field regime.  Two Rectangle Patterns Near-field : example about the near-field heat transfer between two rectangle patterned structures  Mixed Patterns Near-field : example about the near-field heat transfer between two structures with different kinds of patterns (rectangle and circle).  MPI Example : example about how to use Lua wrapped MPI interface for fast parallelization on distributed clusters.", 
            "title": "Examples"
        }, 
        {
            "location": "/#other-information", 
            "text": "Developer : information for developers on how to contribute to MESH  About : information about the author, license, copyrights and contact addresses.", 
            "title": "Other information"
        }, 
        {
            "location": "/features/", 
            "text": "Physical Quantities Computed By MESH\n\n\nBy classifying the geometries into three different categories: planar geometry where the basic components are plates, grating geometry which contains at least one layer has a grating along \nx\n direction, and patterns where at least one layer has either rectangle or circular patterns. The details about these three types are discussed below.\n\n\nIn general, the total heat transfer between bodies with temperatures \nT_1\n and \nT_2\n is written as\n\n\n\n\nP=\\int d\\omega [\\Theta(T_1, \\omega)-\\Theta(T_2,\\omega)]\\Phi(\\omega)\n\n\n\n\nwhere the quantity \n\\Phi(\\omega)\n characterize the strength of heat transfer between the two bodies involved.\n\n\nHeat transfer in planar geometries\n\n\nFor planar geometries (implemented as \nSimulationPlanar\n object),  the quantity \n\\Phi(\\omega)\n computed by integrating the \nk_x\n and \nk_y\n vector over the whole \nk\n space, i.e.\n\n\n\n\n\\Phi(\\omega)=\\int_{-\\infty}^{\\infty}dk_x\\int_{-\\infty}^{\\infty}dk_y \\Phi(k_x,k_y, \\omega)\n\n\n\n\nAnd in the case of an isotropic material in \nx\n and \ny\n direction, the above integral can be reduced to\n\n\n\n\n\\Phi(\\omega)=\\int_{0}^{\\infty}dk_{\\parallel} \\Phi(k_{\\parallel}, \\omega)\n\n\n\n\nMESH directly provides function to compute \n\\Phi(\\omega, k_x, k_y)\n, \n\\Phi(\\omega, k_{\\parallel})\n and \n\\Phi(\\omega)\n directly.\n\n\nHeat transfer in grating geometries\n\n\nIn the case of a grating geometry (implemented as \nSimulationGrating\n object), the heat transfer rate is written as\n\n\n\n\n\\Phi(\\omega)=\\int_{-G/2}^{G/2}dk_x\\int_{-\\infty}^{\\infty}dk_y \\Phi(k_x,k_y, \\omega)\n\n\n\n\nHere again, MESH gives access to a few things\n\n\n\n\nsettings of the integral: for isotropic geometries \n\\int_{-G/2}^{G/2}\n and  \n\\int_{-\\infty}^{\\infty}\n can be reduced to twice of the integral over the positive axis.\n\n\ndirectly computation of \n\\Phi(k_x,k_y, \\omega)\n and \n\\Phi(\\omega)\n, and allows to print out \n\\Phi(k_x,k_y, \\omega)\n in the process of obtaining \n\\Phi(\\omega)\n.\n\n\n\n\nHeat transfer in pattern geometries\n\n\nIn the case of a pattern geometry (implemented as \nSimulationPattern\n object), the heat transfer rate is written as\n\n\n\n\n\\Phi(\\omega)=\\int_{-G_x/2}^{G_x/2}dk_x\\int_{-G_y/2}^{-G_y/2}dk_y \\Phi(k_x,k_y, \\omega)\n\n\n\n\nAgain similar to the grating geometries, integral settings and printing of intermediate \n\\Phi(k_x,k_y, \\omega)\n are supported. In addition, multiple different kinds of patterns can exist in one layer. However, the code now only supports a rectangle lattice and non-interleaving patterns. In MESH, the only two patterns supported are rectangle and circle. However, extending the code to non-trivial lattice and adding supports to more patterns are in principle doable.\n\n\nSupports over both scalar dielectric and tensor dielectric\n\n\nMESH also supports material whose dielectric can be scalar, diagonal, or a tensor. These three different types are encapsulated into a Union type in MESH. Currently for tensor types, MESH can only deal with the case when epsilon in the \nz\n direction can be decomposed from \nx\n and \ny\n directions, i.e.\n\n\n\n\n \\overleftrightarrow{\\epsilon}=\\begin{pmatrix}\n\\epsilon_{xx} & \\epsilon_{xy} & 0\\\\\n\\epsilon_{yx} & \\epsilon_{yy} & 0\\\\\n0 & 0 & \\epsilon_{zz}\n\\end{pmatrix}\n\n\n\n\nA Comprehensive Lua Wrapper for Users\n\n\nLua wrapper for C code is widely used because of easy implementation and high readability. For example, \nS4\n which is also an implementation of RCWA for periodic geometries, also utilizes Lua as its front. Here MESH not only gives the user basic functionalities of computing physical quantities related to heat transfer, but also allows users to directly use MPI in a lua script, so that users have better control over the simulation at run time. To show the advantages of directly revealing MPI interface to the users, a concrete example of lua MPI interface is explained in the \nexample section\n. MESH also provides a vanilla version that can be built without MPI. In that case, OpenMP is used if the system has OpenMP libraries built in.", 
            "title": "Equations & Features"
        }, 
        {
            "location": "/features/#physical-quantities-computed-by-mesh", 
            "text": "By classifying the geometries into three different categories: planar geometry where the basic components are plates, grating geometry which contains at least one layer has a grating along  x  direction, and patterns where at least one layer has either rectangle or circular patterns. The details about these three types are discussed below.  In general, the total heat transfer between bodies with temperatures  T_1  and  T_2  is written as   P=\\int d\\omega [\\Theta(T_1, \\omega)-\\Theta(T_2,\\omega)]\\Phi(\\omega)   where the quantity  \\Phi(\\omega)  characterize the strength of heat transfer between the two bodies involved.", 
            "title": "Physical Quantities Computed By MESH"
        }, 
        {
            "location": "/features/#heat-transfer-in-planar-geometries", 
            "text": "For planar geometries (implemented as  SimulationPlanar  object),  the quantity  \\Phi(\\omega)  computed by integrating the  k_x  and  k_y  vector over the whole  k  space, i.e.   \\Phi(\\omega)=\\int_{-\\infty}^{\\infty}dk_x\\int_{-\\infty}^{\\infty}dk_y \\Phi(k_x,k_y, \\omega)   And in the case of an isotropic material in  x  and  y  direction, the above integral can be reduced to   \\Phi(\\omega)=\\int_{0}^{\\infty}dk_{\\parallel} \\Phi(k_{\\parallel}, \\omega)   MESH directly provides function to compute  \\Phi(\\omega, k_x, k_y) ,  \\Phi(\\omega, k_{\\parallel})  and  \\Phi(\\omega)  directly.", 
            "title": "Heat transfer in planar geometries"
        }, 
        {
            "location": "/features/#heat-transfer-in-grating-geometries", 
            "text": "In the case of a grating geometry (implemented as  SimulationGrating  object), the heat transfer rate is written as   \\Phi(\\omega)=\\int_{-G/2}^{G/2}dk_x\\int_{-\\infty}^{\\infty}dk_y \\Phi(k_x,k_y, \\omega)   Here again, MESH gives access to a few things   settings of the integral: for isotropic geometries  \\int_{-G/2}^{G/2}  and   \\int_{-\\infty}^{\\infty}  can be reduced to twice of the integral over the positive axis.  directly computation of  \\Phi(k_x,k_y, \\omega)  and  \\Phi(\\omega) , and allows to print out  \\Phi(k_x,k_y, \\omega)  in the process of obtaining  \\Phi(\\omega) .", 
            "title": "Heat transfer in grating geometries"
        }, 
        {
            "location": "/features/#heat-transfer-in-pattern-geometries", 
            "text": "In the case of a pattern geometry (implemented as  SimulationPattern  object), the heat transfer rate is written as   \\Phi(\\omega)=\\int_{-G_x/2}^{G_x/2}dk_x\\int_{-G_y/2}^{-G_y/2}dk_y \\Phi(k_x,k_y, \\omega)   Again similar to the grating geometries, integral settings and printing of intermediate  \\Phi(k_x,k_y, \\omega)  are supported. In addition, multiple different kinds of patterns can exist in one layer. However, the code now only supports a rectangle lattice and non-interleaving patterns. In MESH, the only two patterns supported are rectangle and circle. However, extending the code to non-trivial lattice and adding supports to more patterns are in principle doable.", 
            "title": "Heat transfer in pattern geometries"
        }, 
        {
            "location": "/features/#supports-over-both-scalar-dielectric-and-tensor-dielectric", 
            "text": "MESH also supports material whose dielectric can be scalar, diagonal, or a tensor. These three different types are encapsulated into a Union type in MESH. Currently for tensor types, MESH can only deal with the case when epsilon in the  z  direction can be decomposed from  x  and  y  directions, i.e.    \\overleftrightarrow{\\epsilon}=\\begin{pmatrix}\n\\epsilon_{xx} & \\epsilon_{xy} & 0\\\\\n\\epsilon_{yx} & \\epsilon_{yy} & 0\\\\\n0 & 0 & \\epsilon_{zz}\n\\end{pmatrix}", 
            "title": "Supports over both scalar dielectric and tensor dielectric"
        }, 
        {
            "location": "/features/#a-comprehensive-lua-wrapper-for-users", 
            "text": "Lua wrapper for C code is widely used because of easy implementation and high readability. For example,  S4  which is also an implementation of RCWA for periodic geometries, also utilizes Lua as its front. Here MESH not only gives the user basic functionalities of computing physical quantities related to heat transfer, but also allows users to directly use MPI in a lua script, so that users have better control over the simulation at run time. To show the advantages of directly revealing MPI interface to the users, a concrete example of lua MPI interface is explained in the  example section . MESH also provides a vanilla version that can be built without MPI. In that case, OpenMP is used if the system has OpenMP libraries built in.", 
            "title": "A Comprehensive Lua Wrapper for Users"
        }, 
        {
            "location": "/installation/", 
            "text": "Prerequisites\n\n\nMESH comes with two versions: one has OpenMP support if the system has OpenMP libraries; one has MPI support. Both of them requires the following Prerequisites:\n\n\n\n\nLapack and blas (or blas mutants, such as openblas, atlas, or mkl). For MacOS this is not necessary.\n\n\nLua version \n= 5.2 (version 5.3.x is preferred).\n\n\n\n\nIn order to have the MPI version of MESH installed, one needs to install MPI besides the above two libraries.\n\n\nMESH can be downloaded by\n\n\ngit clone git@github.com:kfrancischen/MESH.git\n\ncd\n MESH\n\n\n\n\n\nInstallation on Linux\n\n\nIf the above libraries are installed on the system default directory, The vanilla version of MESH can be simply installed by\n\n\nmake\n\n\n\n\n\nand the MPI version can be installed by\n\n\nmake meshMPI\n\n\n\n\n\nExecutables can be found in directory \nbuild/\n. The executables are called \nmesh\n and \nmeshMPI\n.\n\n\nFor a customized installation, please change the paths for compilers in \nMakefile.Linux\n.\n\n\nInstallation on MacOS\n\n\nDefault clang compiler does not support OpenMP. One can either follow the same steps exactly the same as the installation on Linux machines (then no OpenMP is not supported), or installing gcc with OpenMP first by\n\n\nbrew install gcc --without-multilib\n\n\n\n\n\nand then change the compiles from cc and c++ in \nMakefile.Darwin\n to corresponding GNU compilers, and add \n-fopenmp\n in the \nCFLAGS\n and \nCXXFLAGS\n.\n\n\nInstallation on Windows\n\n\n//TODO, haven't tried yet\n\n\nLocation on Clusters\n\n\nThe mesh has been built on \nhera\n, \ncomet\n and \nstampede\n. The executables are in the directory\n\n\n/home/kfchen/MESH/build/\n\n\n\n\n\nOne can add this to one's own path by adding\n\n\nexport\n \nPATH\n=\n$PATH\n:/home/kfchen/MESH/build/\n\n\n\n\n\n\nin \n.bashrc\n.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#prerequisites", 
            "text": "MESH comes with two versions: one has OpenMP support if the system has OpenMP libraries; one has MPI support. Both of them requires the following Prerequisites:   Lapack and blas (or blas mutants, such as openblas, atlas, or mkl). For MacOS this is not necessary.  Lua version  = 5.2 (version 5.3.x is preferred).   In order to have the MPI version of MESH installed, one needs to install MPI besides the above two libraries.  MESH can be downloaded by  git clone git@github.com:kfrancischen/MESH.git cd  MESH", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/installation/#installation-on-linux", 
            "text": "If the above libraries are installed on the system default directory, The vanilla version of MESH can be simply installed by  make  and the MPI version can be installed by  make meshMPI  Executables can be found in directory  build/ . The executables are called  mesh  and  meshMPI .  For a customized installation, please change the paths for compilers in  Makefile.Linux .", 
            "title": "Installation on Linux"
        }, 
        {
            "location": "/installation/#installation-on-macos", 
            "text": "Default clang compiler does not support OpenMP. One can either follow the same steps exactly the same as the installation on Linux machines (then no OpenMP is not supported), or installing gcc with OpenMP first by  brew install gcc --without-multilib  and then change the compiles from cc and c++ in  Makefile.Darwin  to corresponding GNU compilers, and add  -fopenmp  in the  CFLAGS  and  CXXFLAGS .", 
            "title": "Installation on MacOS"
        }, 
        {
            "location": "/installation/#installation-on-windows", 
            "text": "//TODO, haven't tried yet", 
            "title": "Installation on Windows"
        }, 
        {
            "location": "/installation/#location-on-clusters", 
            "text": "The mesh has been built on  hera ,  comet  and  stampede . The executables are in the directory  /home/kfchen/MESH/build/  One can add this to one's own path by adding  export   PATH = $PATH :/home/kfchen/MESH/build/   in  .bashrc .", 
            "title": "Location on Clusters"
        }, 
        {
            "location": "/LuaAPI/baseClass/", 
            "text": "MESH is written in a inheritance manner, so most of the functions in the base class can be directly accessed by subclasses. Usage of MESH involves writing a Lua script to call into various parts of MESH. Here we describe all of the MESH base class functions that can be called within the Lua environment.\n\n\nFor detailed function calls of a given geometry, please read the pages \nSimulationPlanar\n, \nSimulationGrating\n and \nSimulationPattern\n for the geometries you are simulating.\n\n\n\n\nNote\n\n\nThe base class is just a wrapper for most of the functions, but it cannot be initiated in a Lua script. The only instances that can be initiated are the classes corresponding to different dimensions.\n\n\n\n\nAddMaterial\n(\nmaterial\n \nname\n,\n \ninput\n \nfile\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nmaterial name: [string], the name of the material added to the simulation. Such name is unique and if there already exists a material with the same name, an error message will be printed out.\n\n\ninput file: [string], a file that contains the dielectric properties of the corresponding material. For scalar dielectric, the input file should be formatted as   \n\n\nomega eps_r eps_i\n  \n\nFor diagonal dielectric, the format is  \n\n\nomega eps_xx_r eps_xx_i eps_yy_r eps_yy_i eps_zz_r  eps_zz_i\n  \n\nFor tensor dielectric, the format is  \n\n\nomega eps_xx_r eps_xx_i eps_xy_r eps_xy_i eps_yx_r eps_yx_i eps_yy_r eps_yy_i eps_zz_r  eps_zz_i\n     \n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nNote: The omega needs to be aligned for all the materials in the simulation.\n\n\n\n\n\n\nSetMaterial\n(\nmaterial\n \nname\n,\n \nnew\n \nepsilon\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nmaterial name: [string], the name of the material whose epsilon will be changed. This material should already exist in the simulation, otherwise an error will be printed out.\n\n\nnew epsilon: [nested table], the length equals the number of omega, and per row is the epsilon values with the same format as the input of \nAddMaterial\n function. i.e. for scalar case the length will be \n2\n, for diagonal case the length is \n6\n and for tensor case the length is \n10\n.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nAddLayer\n(\nlayer\n \nname\n,\n \nthickness\n,\n \nmaterial\n \nname\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nlayer name: [string], the name of the layer. Similarly, the names for layers are unique, and if such name already exists in the simulation, an error message will be printed out.\n\n\nthickness: [double], the thickness of the new layer in SI unit.\n\n\nmaterial name: [string], the material that is used as the background of the layer. This material should already exist in the simulation, otherwise an error message will be printed out.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nNote: this new added layer will be placed on top of all the previous layers.\n\n\n\n\n\n\nSetLayer\n(\nlayer\n \nname\n,\n \nthickness\n,\n \nmaterial\n \nname\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nlayer name: [string], the layer whose thickness and background will be changed. Such layer needs to already exist in the simulation, otherwise an error message will be printed out.\n\n\nthickness: [double], the new thickness of the layer.\n\n\nmaterial name: [string], the material for the background of the layer. If such material does not exist, an error message will be printed out.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nSetLayerThickness\n(\nlayer\n \nname\n,\n \nthickness\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nlayer name: [string],  the layer whose thickness will be changed. Such layer needs to already exist in the simulation, otherwise an error message will be printed out.\n\n\nthickness: [double], the new thickness of the layer.\n\n\n\n\n\n\n\n\nOutput: None  \n\n\n\n\n\n\nAddLayerCopy\n(\nnew\n \nlayer\n \nname\n,\n \noriginal\n \nlayer\n \nname\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nnew layer name: [string], the new layer that is copied from the original layer.  Such name cannot already exist in the simulation, otherwise an error message will be printed out.\n\n\noriginal layer name: [string], the original layer from whom everything is copied. If this layer does not exist in the simulation, an error will be printed out.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nNote: this function only copies the structure information, for example any pattern of the original layer, but does not copy any thermal information. For example, even the original layer is set as a source, the copied layer is still not a source. In addition, this new added layer will be placed on top of all the previous layers.\n\n\n\n\n\n\nDeleteLayer\n(\nlayer\n \nname\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nlayer name: [string], the name of the layer that will be deleted. Such layer should already be in the system, otherwise an error will be printed out.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nSetPeriodicity\n(\np1\n,\n \np2\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\np1: [double], the periodicity in \nx\n direction in SI unit.\n\n\np2: [double, optional for grating geometry], the periodicity in \ny\n direction in SI unit.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nSetGx\n(\nnGx\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nnGx: [int], the number of positive Fourier components in \nx\n direction. The total number of G is thus 2nGx+1.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nSetGy\n(\nnGy\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nnGy: [int], the number of positive Fourier components in \ny\n direction. The total number of G is thus 2nGy+1.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nSetSourceLayer\n(\nlayer\n \nname\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nlayer name: [string], the name of the layer that is designated as the source layer. Such layer should already exist in the system, otherwise an error will be printed out.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nNote: a system can have more than \n1\n source layers\n\n\n\n\n\n\nSetProbeLayer\n(\nlayer\n \nname\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nlayer name: [string], the name of the layer that is designated as the probe layer of the flux. Such layer should already exist in the system, otherwise an error will be printed out.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nNote: a system can have only one probe layer. Setting another layer as the probe layer will overwrite the previous one. In addition, the source layer should be above all the source layers in the real geometry.\n\n\n\n\n\n\nSetThread\n(\nnthread\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nnthreads: [int], number of threads used in OpenMP.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\nNote: this function only works in an OpenMP setup.\n\n\n\n\nSetKxIntegral\n(\npoints\n,\n \nend\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\npoints: [int], number of points in the integration\n\n\nend: [double, optional for grating and pattern geometries], the end of the integral over \nk_x\n. This end should be a normalized number with respect to \n\\omega/c\n.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nNote: this function is essential doing\n\n\\int_{-\\text{end}\\cdot \\omega/c}^{\\text{end}\\cdot \\omega/c}dk_x\n where the integral is evaluated as a summation of \npoints\n points. In the case when \nend\n is not given, the lower and upper bounds of the integral will be \n\\pm G_x/2\n.\n\n\n\n\n\n\nSetKyIntegral\n(\npoints\n,\n \nend\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\npoints: [int], number of points in the integration\n\n\nend: [double, optional for pattern geometries], the end of the integral over \nk_y\n. This end should be a normalized number with respect to \n\\omega/c\n. In the case when \nend\n is not given, the upper bound of the integral will be \n(G_y/2)/(\\omega/c)\n.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nNote: this function is essential doing\n\n\\int_{-\\text{end}\\cdot \\omega/c}^{\\text{end}\\cdot \\omega/c}dk_y\n where the integral is evaluated as a summation of \npoints\n points. In the case when \nend\n is not given, the lower and upper bounds of the integral will be \n\\pm G_y/2\n.\n\n\n\n\n\n\nSetKxIntegralSym\n(\npoints\n,\n \nend\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\npoints: [int], number of points in the integration\n\n\nend: [double, optional for grating and pattern geometries], the end of the integral over \nk_x\n. This end should be a normalized number with respect to \n\\omega/c\n.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nNote: this function is essential doing\n\n2\\times \\int_{0}^{\\text{end}\\cdot \\omega/c}dk_x\n where the integral is evaluated as a summation of \npoints\n points. In the case when \nend\n is not given, the upper bound of the integral will be \nG_x/2\n.\n\n\n\n\n\n\nSetKyIntegralSym\n(\npoints\n,\n \nend\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\npoints: [int], number of points in the integration\n\n\nend: [double, optional for pattern geometries], the end of the integral over \nk_y\n. This end should be a normalized number with respect to \n\\omega/c\n.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nNote: this function is essential doing\n\n2\\times \\int_{0}^{\\text{end}\\cdot \\omega/c}dk_y\n where the integral is evaluated as a summation of \npoints\n points. In the case when \nend\n is not given, the upper bound of the integral will be \nG_y/2\n.\n\n\n\n\n\n\nBuildRCWA\n()\n\n\n\n\n\n\n\n\n\n\nArguments: None\n\n\n\n\n\n\nNote: this function builds up the matrices for the dielectric and performs RCWA.\n\n\n\n\n\n\nIntegrateKxKy\n()\n\n\n\n\n\n\n\n\n\n\nArguments: None\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nNote: this function integrates over \nk_x\n and \nk_y\n based on the integral properties set by the user. So the function can only be called after the \nk_x\n and \nk_y\n integrals are configured, and RCWA matrices are built.\n\n\n\n\n\n\nIntegrateKxKyMPI\n(\nrank\n,\n \nsize\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nrank: [int], the rank of the thread\n\n\nsize: [int], the total size of the MPI run.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nNote: this function can only be called during MPI. For an example of a funtion call, please refer to \nMPI example\n.\n\n\n\n\n\n\nGetNumOfOmega\n()\n\n\n\n\n\n\n\n\n\n\nArguments: None\n\n\n\n\n\n\nOutput: [int], the number of total omega points computed in the simulation.\n\n\n\n\n\n\nGetPhi\n()\n\n\n\n\n\n\n\n\n\n\nArguments: None\n\n\n\n\n\n\nOutput: [table of double], the \n\\Phi(\\omega)\n values obtained from the simulation.\n\n\n\n\n\n\nNote: can only be called after \nk_x\n and \nk_y\n are integrated.\n\n\n\n\n\n\nGetOmega\n()\n\n\n\n\n\n\n\n\n\n\nArguments: None\n\n\n\n\n\n\nOutput: [table of double], the omega values computed in the simulation.\n\n\n\n\n\n\nGetPhiAtKxKy\n(\nomega\n \nindex\n,\n \nkx\n,\n \nky\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nomega index: [int], the index of the omega value where \n\\Phi(\\omega[\\text{index}], k_x, k_y)\n is evaluated.\n\n\nkx: [double], the \nk_x\n value where \n\\Phi(\\omega[\\text{index}], k_x, k_y)\n is evaluated. It is a normalized by \n\\omega[\\text{index}]/c\n.\n\n\nky: [double], the \nk_y\n value where \n\\Phi(\\omega[\\text{index}], k_x, k_y)\n is evaluated. It is a normalized by \n\\omega[\\text{index}]/c\n.\n\n\n\n\n\n\n\n\nOutput: [double], the value of \n\\Phi(\\omega, k_x, k_y)\n.\n\n\n\n\n\n\nOutputSysInfo\n()\n\n\n\n\n\n\n\n\n\n\nArguments: None\n\n\n\n\n\n\nOutput: the function prints out a system description to screen.\n\n\n\n\n\n\nOutputStructurePOVRay\n(\nfile\n \nname\n)\n\n\n\n\n\n\n\n\nArguments:\n    file name: [string], the output file that contains the POVRay object that describes the system. The file needs to have extension \".pov\".\n\n\nOutput: None\n\n\n\n\nAlso, MESH provides some options for printing intermediate information and methods for Fourier transform of the dielectric.\n\n\nOptUseNaiveRule\n()\n\n\n\n\n\n\n\n\n\n\nArguments: None\n\n\n\n\n\n\nNote: this function tells the RCWA to use the simplest closed form Fourier transform for the dielectric.\n\n\n\n\n\n\nOptUseInverseRule\n()\n\n\n\n\n\n\n\n\n\n\nArguments: None\n\n\n\n\n\n\nNote: this function tells the RCWA to use the inverse rule of the Fourier transform for the dielectric.\n\n\n\n\n\n\nOptPrintIntermediate\n()\n\n\n\n\n\n\n\n\n\n\nArguments: None\n\n\n\n\n\n\nNote: this function prints intermediate \n\\Phi(\\omega, k_x, k_y)\n when function \nIntegrateKxKy()\n or \nIntegrateKxKyMPI(rank, size)\n is called.\n\n\n\n\n\n\nMESH also provides physics constants to facilitate computation. The constant object can be initiated by\n\n\nconstant\n \n=\n \nConstants\n()\n\n\n\n\n\n\nThe supported constants are (all in SI unit)\n\n\n\n\nconstant.pi: the value of \n\\pi\n.\n\n\nconstant.k_B: the value of \nk_B\n.\n\n\nconstant.eps_0: the value of \n\\epsilon_0\n.\n\n\nconstant.mu_0: the value of \n\\mu_0\n.\n\n\nconstant.m_e: the value of \nm_e\n, i.e. the mass of an electron.\n\n\nconstant.eV: electron volt in Joules.\n\n\nconstant.h: the value of Planck's constant.\n\n\nconstant.h_bar: the value of the reduced Planck's constant.\n\n\nconstant.c_0: the speed of light.\n\n\nconstant.q: the value of \nq\n, i.e. magnitude of electron charge.\n\n\nconstant.sigma: the value of \n\\sigma\n, i.e. Stefan-Boltzmann constant.", 
            "title": "Base Class"
        }, 
        {
            "location": "/LuaAPI/planar/", 
            "text": "The SimulationPlanar class can be initiated in Lua script by\n\n\ns\n \n=\n \nSimulationPlanar\n.\nnew\n()\n\n\n\n\n\n\nMost of the function provided in \nbase class\n can be used except for the following changes.\n\n\n\n\nFailure\n\n\nThe following function are unavailable and cannot be called for a \nSimulationPlanar\n object.\n\n\n\n\nSetGx\n()\n\n\nSetGy\n()\n\n\nSetperiodicity\n(\np1\n,\n \np2\n)\n\n\n\n\n\n\n\n\nNote\n\n\nThe following functions are added and specific to \nSimulationPlanar\n object.\n\n\n\n\nSetKParallel\n(\nend\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nend: [double], the end of the \nk_{\\parallel}\n integral. It is a normalized number with respect to \n\\omega/c\n.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nNote: this function is essentially doing\n\n \\int_{0}^{\\text{end}\\cdot\\omega/c}dk_{\\parallel}\n\nwhere the integral is evaluated either using Gauss-legendre methdod or Gauss-kronrod adaptive method.\n\n\n\n\n\n\nGetPhiAtKParallel\n(\nomega\n \nindex\n,\n \nk\n \nparallel\n \nvalue\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nomega index: [int], the index of omega where \n\\Phi(\\omega[\\text{index}], k_{\\parallel})\n is evaluated.\n\n\nk parallel: [double], the \nk_{\\parallel}\n value where \n\\Phi(\\omega[\\text{index}], k_{\\parallel})\n is evaluated. It should be a normalized value with respect to \n\\omega[\\text{index}]/c\n.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nIntegrateKPrarallel\n()\n\n\n\n\n\n\n\n\n\n\nArguments: None\n\n\n\n\n\n\nNote: before using this function, make sure the flux integral can be reduced to a \nk_{\\parallel}\n integral. In principle, the cases when all the materials possess only scalar dielectric or diagonal forms\n\n \\begin{pmatrix}\n\\epsilon_{1} & 0 & 0\\\\\n0 & \\epsilon_{1} & 0\\\\\n0 & 0 & \\epsilon_{2}\n\\end{pmatrix}\n can use this function.\n\n\n\n\n\n\nOptUseQuadgl\n(\ndegree\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\ndegree: [int, optional], the degree of legendre polynomial in evaluating the integral. If degree is not given, it is set to be \n1024\n.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nOptUseQuadgk\n()\n\n\n\n\n\n\n\n\n\n\nArguments: None\n\n\n\n\n\n\nNote: the simulation will use this function if the integral option is not specified.", 
            "title": "SimulationPlanar"
        }, 
        {
            "location": "/LuaAPI/grating/", 
            "text": "The SimulationGrating class can be initiated in Lua script by\n\n\ns\n \n=\n \nSimulationGrating\n.\nnew\n()\n\n\n\n\n\n\nAll of the function provided in \nbase class\n can be used except for the following changes.\n\n\n\n\nWarning\n\n\nThe following function needs to be called specifically for \nSimulationGrating\n object.\n\n\n\n\nSetPeriodicity\n(\np1\n)\n\n\n\n\n\n\nThe above function can only be called without the second argument \np2\n.\n\n\n\n\nNote\n\n\nThe following functions are added and specific to \nSimulationGrating\n object.\n\n\n\n\nSetLayerPatternGrating\n(\nlayer\n \nname\n,\n \nmaterial\n \nname\n,\n \ncenter\n,\n \nwidth\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nlayer name: [string], the layer that this grating will be embedded. Such layer should already exist in the simulation, otherwise an error message will be printed out.\n\n\nmaterial name: [string],  the material used as the grating. Such material should already exist in the simulation, otherwise an error message will be printed out.\n\n\ncenter: [double], the center of the grating in SI unit.\n\n\nwidth: [double], the width of the grating in SI unit.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nOptUseAdaptive\n()\n\n\n\n\n\n\n\n\n\n\nArguments: None\n\n\n\n\n\n\nNote: this function will use the \nspatial adaptive resolution method\n to compute the Fourier transform of the dielectric.", 
            "title": "SimulationGrating"
        }, 
        {
            "location": "/LuaAPI/pattern/", 
            "text": "The SimulationPattern class can be initiated in Lua script by\n\n\ns\n \n=\n \nSimulationPattern\n.\nnew\n()\n\n\n\n\n\n\nAll of the function provided in \nbase class\n can be used.\n\n\n\n\nNote\n\n\nThe following functions are added and specific to \nSimulationPattern\n object.\n\n\n\n\nSetLayerPatternRectangle\n(\nlayer\n \nname\n,\n \nmaterial\n \nname\n,\n \n{\ncenterx\n,\n \ncentery\n},\n \n{\nwidthx\n,\n \nwidthy\n})\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nlayer name: [string], the layer that this rectangle pattern will be embedded. Such layer should already exist in the simulation, otherwise an error message will be printed out.\n\n\nmaterial name: [string],  the material used as the rectangle pattern. Such material should already exist in the simulation, otherwise an error message will be printed out.\n\n\n{centerx, centery}: [double table], the centers of the rectangle pattern in \nx\n and \ny\n direction, respectively, in SI unit.\n\n\n{widthx, widthy}: [double table], the widths of the rectangle pattern in \nx\n and \ny\n direction, respectively, in SI unit.\n\n\n\n\n\n\n\n\nOutput: None\n\n\n\n\n\n\nSetLayerPatternCircle\n(\nlayer\n \nname\n,\n \nmaterial\n \nname\n,\n \n{\ncenterx\n,\n \ncentery\n},\n \nradius\n)\n\n\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nlayer name: [string], the layer that this circle pattern will be embedded. Such layer should already exist in the simulation, otherwise an error message will be printed out.\n\n\nmaterial name: [string],  the material used as the circle pattern. Such material should already exist in the simulation, otherwise an error message will be printed out.\n\n\n{centerx, centery}: [double table], the centers of the circle pattern in \nx\n and \ny\n direction, respectively, in SI unit.\n\n\nradius: [double], the radius of the circle pattern in SI unit.\n\n\n\n\n\n\n\n\nOutput: None", 
            "title": "SimulationPattern"
        }, 
        {
            "location": "/C++API/classAndFunction/", 
            "text": "The C++ interface have the same functions as the Lua interface except for the following changes.\n\n\n\n\nAn instance of a class is initiated to smart pointers. For example to instantiate a \nSimulationPlanar\n object, the right way to do is\n\n\n\n\nPtr\nSimulationPlanar\n \ns\n \n=\n \nSimulationPlanar\n::\ninstanceNew\n();\n\n\n\n\n\n\nThis also applies to the instantiation of \nSimulationGrating\n and \nSimulationPattern\n objects. The advantage of using smart pointers is that there is no need to do manual gabage collection using \ndelete\n.\n\n\n\n\n\n\nFunction names: the function names starts with lower case whereas Lua interface starts with a capital letter.\n\n\n\n\n\n\nextra inputs in function \nsetMaterial\n. In C++, this function is called as    \n\n\n\n\n\n\nvoid\n \nsetMaterial\n(\nconst\n \nstd\n::\nstring\n \nname\n,\n \ndouble\n**\n \nepsilon\n,\n \nconst\n \nstd\n::\nstring\n \ntype\n)\n\n\n\n\n\n\nwhere type is one of \"scalar\", \"diagonal\" and \"tensor\". The 2D array \nepsilon\n then depends on the type. For scalar, the epsilon is of dimension \n\\text{# omega}\\times 2\n. For diagonal, the epsilon is of dimension \n\\text{# omega}\\times 6\n, and for tensor, the epsilon is of dimension \n\\text{# omega}\\times 10\n.\n\n\n\n\n\n\nchanges in obtaining physical constants. In C++ there is no need to initiate or call any function to retrieve the constants. A constant, for example \nq\n, can be directly obtained by using constant.q.\n\n\n\n\n\n\nExtra Makefile is needed. An example for the Makefile for a \nmain.cpp\n file is         \n\n\n\n\n\n\nCFLAGS\n=\n-std\n=\nc++11 -O3 -ffast-math -march\n=\nnative -fopenmp  \n\nMESHPATH\n=\n../../          \n\nINCLUDES\n=\n-I\n$(\nMESHPATH\n)\n/src        \n\nARMAINCLUDE\n=\n-I\n$(\nMESHPATH\n)\n/src/arma -DARMA_DONT_USE_WRAPPER -DARMA_NO_DEBUG         \n\nLIBS\n=\n-L\n$(\nMESHPATH\n)\n/build -lmesh -lopenblas -llapack        \n\nCXX\n=\ng++       \nall:     \n \n$(\nCXX\n)\n \n$(\nCFLAGS\n)\n \n$(\nINCLUDES\n)\n \n${\nARMAINCLUDE\n}\n main.cpp -o main \n$(\nLIBS\n)\n\n\n\n\n\n\nThe \nMESHPATH\n should point to where the \nsrc\n folder is placed.", 
            "title": "Classes and Functions"
        }, 
        {
            "location": "/Examples/tutorial/", 
            "text": "", 
            "title": "Tutorial Example"
        }, 
        {
            "location": "/Examples/planeFarField/", 
            "text": "", 
            "title": "Single Plane Far-field"
        }, 
        {
            "location": "/Examples/planeNearField/", 
            "text": "", 
            "title": "Two Planes Near-field"
        }, 
        {
            "location": "/Examples/anisotropic/", 
            "text": "", 
            "title": "Anisotropic Material Near-field"
        }, 
        {
            "location": "/Examples/iterate/", 
            "text": "", 
            "title": "Iterate Over Gaps Near-field"
        }, 
        {
            "location": "/Examples/gratingNearField/", 
            "text": "", 
            "title": "Two Gratings Near-field"
        }, 
        {
            "location": "/Examples/rectangleNearField/", 
            "text": "", 
            "title": "Two Rectangle Patterns Near-field"
        }, 
        {
            "location": "/Examples/mixedNearField/", 
            "text": "", 
            "title": "Mixed Patterns Near-field"
        }, 
        {
            "location": "/Examples/MPI/", 
            "text": "", 
            "title": "MPI Example"
        }, 
        {
            "location": "/develop/", 
            "text": "", 
            "title": "Developer"
        }, 
        {
            "location": "/about/", 
            "text": "MESH is copyright (c) 2016-2018, Stanford University.\n\n\nMESH is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\n\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\n\nYou should have received a copy of the GNU General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. You can also find it on the GNU web site:\n\n\nhttp://www.gnu.org/copyleft/gpl.html\n\n\nThe author would like to acknowledge the following packages:\n\n\n\n\n\n\narmadillo: \nC++ linear algebra library\n\n\n\n\n\n\nluawrapper: \nThe lua wrapper for C++ classes\n\n\n\n\n\n\nlua-mpi: \nThe lua wrapper for MPI\n\n\n\n\n\n\nAlso, the author would like to thank Dr. Bo Zhao, Yu Guo and alumni Victor Liu for useful discussions, and Siddharth Buddhiraju for testing installation and some cases.", 
            "title": "About"
        }
    ]
}